#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import io
import logging
import os
import re

try:
    from bs4 import BeautifulSoup
    from docx import Document
    from docx.shared import Pt, Inches
    from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
except Exception as err:
    logging.error(err)
# end try

logger = logging.getLogger('DOCX_BINDER')


def stylize_paragraph(p):
    p.style.font.name = 'Book Antiqua'
    p.style.font.size = Pt(12)
    p.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.from_xml('both')
# end def


def build_paragraph(paragraph, elem):
    stylize_paragraph(paragraph)
    for tag in elem.children:
        run = None
        if not tag.name:
            run = paragraph.add_run(str(tag))
        elif re.match(r'b|strong|label', tag.name):
            run = paragraph.add_run(tag.text)
            run.bold = True
        elif re.match(r'i|em|cite', tag.name):
            run = paragraph.add_run(tag.text)
            run.italic = True
        elif re.match(r'u', tag.name):
            run = paragraph.add_run(tag.text)
            run.underline = True
        elif re.match(r'sub', tag.name):
            run = paragraph.add_run(tag.text)
            run.font.subscript = True
        elif re.match(r'sup', tag.name):
            run = paragraph.add_run(tag.text)
            run.font.superscript = True
        elif re.match(r'pre|code|kdb', tag.name):
            run = paragraph.add_run(tag.text)
            run.font.outline = True
        else:
            run = paragraph.add_run(tag.text)
        # end if
        run.font.name = 'Book Antiqua'
        paragraph.add_run(' ')
    # end for
# end def


def make_chapter(book, chapter):
    soup = BeautifulSoup(chapter['body'], 'lxml')
    for tag in soup.find('body').children:
        if not tag.name:
            stylize_paragraph(book.add_paragraph(str(tag)))
        elif re.match(r'h\d', tag.name):
            size = int(tag.name[1])
            p = book.add_heading(tag.text, size)
            p.style.font.size = Pt(14 + 2 * (6 - size))
            p.paragraph_format.space_before = Pt(0)
        elif tag.name == 'p':
            build_paragraph(book.add_paragraph(), tag)
        # end if
    # end for
    book.add_page_break()
# end def


def bind_docx_book(app, chapters, volume=''):
    book_title = (app.crawler.novel_title + ' ' + volume).strip()
    logger.debug('Binding %s.docx', book_title)

    # Create book
    book = Document()
    book.core_properties.language = 'en'
    book.core_properties.title = book_title
    book.core_properties.category = 'Lightnovel'
    book.core_properties.author = 'Lightnovel Crawler'
    book.core_properties.identifier = app.output_path + volume

    # Create intro page
    p = book.add_heading(app.crawler.novel_title or 'N/A', 0)
    p.paragraph_format.space_before = Inches(0.25)
    p.alignment = WD_PARAGRAPH_ALIGNMENT.from_xml('center')
    p.style.font.size = Pt(36.0)

    p = book.add_paragraph()
    p.alignment = WD_PARAGRAPH_ALIGNMENT.from_xml('center')
    r = p.add_run((app.crawler.novel_author or '').replace(':', ': '))
    r.bold = True
    r.font.size = Pt(18.0)

    try:
        p = book.add_paragraph()
        p.alignment = WD_PARAGRAPH_ALIGNMENT.from_xml('center')
        p.add_run().add_picture(app.book_cover, height=Inches(5))
        p.paragraph_format.space_after = Inches(0.25)
    except Exception as err:
        logger.info('No book cover')
        book.add_paragraph().paragraph_format.space_after = Inches(5)
    # end try

    p = book.add_paragraph()
    p.alignment = WD_PARAGRAPH_ALIGNMENT.from_xml('center')
    p.add_run('Source: ').bold = True
    p.add_run(app.crawler.home_url)
    p.style.font.size = Pt(12.0)

    p = book.add_paragraph('Generated by ')
    p.alignment = WD_PARAGRAPH_ALIGNMENT.from_xml('center')
    p.add_run('Lightnovel Crawler').bold = True
    p.add_run('\n')
    p.add_run('https://github.com/dipu-bd/lightnovel-crawler')
    p.style.font.size = Pt(12.0)

    book.add_page_break()

    # Create chapters
    for chapter in chapters:
        make_chapter(book, chapter)
    # end for

    # Save docx file
    docx_path = os.path.join(app.output_path, 'docx')
    file_name = (app.good_file_name + ' ' + volume).strip()
    file_path = os.path.join(docx_path, file_name + '.docx')
    logger.debug('Writing %s.docx', file_name)
    os.makedirs(docx_path, exist_ok=True)
    book.save(file_path)
    print('Created: %s.docx' % file_name)
    return file_path
# end def


def make_docx(app, data):
    docx_files = []
    for vol in data:
        if len(data[vol]) > 0:
            book = bind_docx_book(
                app,
                volume=vol,
                chapters=data[vol],
            )
            docx_files.append(book)
        # end if
    # end for
    return docx_files
# end def
